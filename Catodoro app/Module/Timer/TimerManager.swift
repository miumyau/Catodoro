import UIKit
import UserNotifications
class TimerManager {
    // –ó–∞–º—ã–∫–∞–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    var stateDidChange: ((Bool) -> Void)?// –ó–∞–º—ã–∫–∞–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    // –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–¥—ã—Ö–∞
    private var isRestingInternal = false {
        didSet {
            // –í—ã–∑—ã–≤–∞–µ–º –∑–∞–º—ã–∫–∞–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            stateDidChange?(isRestingInternal)
        }
    }
    // –°–≤–æ–π—Å—Ç–≤–æ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –æ—Ç–¥—ã—Ö–∞
    var isResting: Bool {
        return isRestingInternal
    }
    //–°–≤–æ–π—Å—Ç–≤–∞ –¥—è–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–æ–º
    var timer = Timer()
    var time: Int
    var isTimerStarted = false
    var isSessionStarted = false
    //—ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ SoundManager –¥–ª—è –≤—ã–∑–æ–≤–∞ –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π
    var soundManager: SoundManager?
    //–≤—ã–±—Ä–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
    private var selectedTask: TaskModel? {
        didSet {
            sessionNumber = Int(selectedTask?.sessionNumber ?? 0)//—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º sessionNumber —Ä–∞–≤–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—é –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
        }
    }
    // UI —ç–ª–µ–º–µ–Ω—Ç—ã
    var  catImage: UIImageView!
    var readinessPanel: UIView!
    var readinessStackView: UIStackView!
    weak var view: UIView!
    weak var timeLabel: UILabel!
    weak var bannerLabel: UILabel!
    weak var motivationLabel: UILabel!
    weak var startButton: UIButton!
    weak var optionsButton: UIButton!
    weak var stopButton: UIButton!
    weak var pauseImage: UIImageView!
    weak var circlePauseLayer: CAShapeLayer!
    //–º–∞—Å—Å–∏–≤—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    let catImages: [String] = ["cat1", "cat2", "cat3", "cat4", "cat5"]
    let readyImages: [String] = ["fishReady", "bugReady", "mushReady"]
    let notreadyImages: [String] = ["fishNotReady", "bugNotReady", "mushNotReady"]
    //–∏–Ω–¥–µ–∫—Å—ã
    var currentreadyIndex: Int
    var sessionNumber: Int
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–ª–∞—Å—Å–∞
    init(view: UIView, readinessStackView: UIStackView, catImage: UIImageView, readinessPanel: UIView, currentreadyIndex: Int, timeLabel: UILabel, isRestingInternal: Bool, isSessionStarted: Bool, isTimerStarted: Bool, motivationLabel: UILabel, bannerLabel: UILabel, startButton: UIButton, optionsButton: UIButton, stopButton: UIButton, pauseImage: UIImageView, circlePauseLayer: CAShapeLayer, soundManager: SoundManager?, time: Int) {
        self.view = view
        self.isRestingInternal = isRestingInternal
        self.isSessionStarted = isSessionStarted
        self.isTimerStarted = isTimerStarted
        self.timeLabel = timeLabel
        self.startButton = startButton
        self.stopButton = stopButton
        self.pauseImage = pauseImage
        self.circlePauseLayer = circlePauseLayer
        self.optionsButton = optionsButton
        self.readinessPanel = readinessPanel
        self.readinessStackView = readinessStackView
        self.currentreadyIndex = currentreadyIndex
        self.bannerLabel = bannerLabel
        self.motivationLabel = motivationLabel
        self.catImage = catImage
        self.soundManager = soundManager
        self.time = time
        self.sessionNumber = 0
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        NotificationCenter.default.addObserver(self, selector: #selector(updateReadinessImage), name: .updateReadinessImage, object: nil)
    }
    // –î–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä, –æ—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    deinit {
        NotificationCenter.default.removeObserver(self)
    }
    // –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–∞–π–º–µ—Ä–∞
    func startTimer() {
        circlePauseLayer.removeFromSuperlayer()
        pauseImage.removeFromSuperview()
        timer.invalidate() // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∑–∞–ø—É—â–µ–Ω
        timer = Timer.scheduledTimer(timeInterval: 1, target: self, selector: #selector(updateTimer), userInfo: nil, repeats: true)
        isTimerStarted = true
        updateTimer() // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞, —á—Ç–æ–±—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    }
    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–µ—Ä–∞
    func pauseTimer() {
        if isTimerStarted {
            AnimationManager.pausedAnimation()
            timer.invalidate()
            isTimerStarted=false
            let circlePausePath = UIBezierPath(arcCenter: CGPoint(x: view.frame.midX, y: view.frame.midY-130), radius: CGFloat(170), startAngle: CGFloat(0), endAngle: CGFloat(Double.pi * 2), clockwise: true)
            circlePauseLayer.path = circlePausePath.cgPath
            circlePauseLayer.fillColor = UIColor.white.cgColor
            circlePauseLayer.opacity=0.5
            circlePauseLayer.strokeColor = UIColor.clear.cgColor
            view.layer.addSublayer(circlePauseLayer)
            view.addSubview(pauseImage)
            pauseImage.translatesAutoresizingMaskIntoConstraints = false
            NSLayoutConstraint.activate([
                pauseImage.topAnchor.constraint(equalTo: view.topAnchor, constant: 260),
                pauseImage.centerXAnchor.constraint(equalTo: view.centerXAnchor)
            ])
            startButton.setTitle("–í–µ—Ä–Ω—É—Ç—å—Å—è", for: .normal)
            stopButton.setTitle("–û—Ç–º–µ–Ω–∏—Ç—å", for: .normal)
            stopButton.backgroundColor = .catodoroRed
        }
    }
    // –ú–µ—Ç–æ–¥ –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞
    func resumeTimer() {
        startTimer()
        AnimationManager.resumeAnimation()
        startButton.setTitle("–ü–∞—É–∑–∞", for: .normal)
        stopButton.setTitle("–û—Ç–º–µ–Ω–∏—Ç—å", for: .normal)
        stopButton.backgroundColor = .catodoroRed
    }
    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–µ—Ä–∞
    func stopTimer() {
        circlePauseLayer.removeFromSuperlayer()
        pauseImage.removeFromSuperview()
        timer.invalidate()
        isTimerStarted = false
        AnimationManager.stopAnimation()
    }
    // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ç–∞–π–º–µ—Ä–∞
    func resetTimer() {
        time = 0
        isTimerStarted = false
        isSessionStarted = false
        circlePauseLayer.removeFromSuperlayer()
        pauseImage.removeFromSuperview()
        timeLabel.text = formatTime(time: time)
        startButton.setTitle("–°—Ç–∞—Ä—Ç", for: .normal)
        stopButton.isEnabled = false
        stopButton.alpha = 0.5
        startButton.backgroundColor = UIColor(red: 1, green: 1, blue: 1, alpha: 0.5)
        stopButton.setTitle("–û—Ç–º–µ–Ω–∏—Ç—å", for: .normal)
        stopButton.backgroundColor = UIColor(red: 1, green: 1, blue: 1, alpha: 0.5)
        AnimationManager.resetAnimation()
    }
    // –ú–µ—Ç–æ–¥ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å—Ç—Ä–æ–∫—É "–º–º:—Å—Å"
    func formatTime(time: Int) -> String {
        let minutes = time / 60 % 60
        let seconds = time % 60
        return String(format: "%02i:%02i", minutes, seconds)
    }
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
    @objc  func updateTimer() {
        guard let task = selectedTask else { return }
        if time < 1 {
            if isResting {
                startWorkSession()
            } else {
                task.readinessNumber += 1
                changeImage(imageIndex: Int(task.readinessNumber) - 1)
                saveContext() // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è readinessNumber
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π
                if task.readinessNumber >= task.sessionNumber {
                    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
                    if task.canNotify {
                        // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏
                        scheduleNotification(title: "–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", body: "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∑–∞–¥–∞—á—É.", identifier: "taskCompletionNotification")
                    }
                    AnimationManager.stopAnimation()
                    task.taskReadiness = true
                    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
                    saveContext()
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞—á–∏
                    optionsButton.setTitle("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É", for: .normal)
                    showCompletionOverlay()
                    stopTimer()
                    resetTimer()
                    clearReadinessPanel()
                    setupInitialState()
                    return // –í—ã—Ö–æ–¥ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã –Ω–µ –Ω–∞—á–∏–Ω–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
                }
                if Int(task.readinessNumber) % longRestTime == 0 {
                    if task.canNotify {
                        // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –¥–ª–∏–Ω–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞
                        scheduleNotification(title: "–î–ª–∏–Ω–Ω—ã–π –æ—Ç–¥—ã—Öüòå", body: "–í—Ä–µ–º—è –¥–ª—è –¥–ª–∏–Ω–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞", identifier: "longRestNotification")
                    }
                    startLongRest()
                } else {
                    if task.canNotify {
                        // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –æ—Ç–¥—ã—Ö–∞
                        scheduleNotification(title: "–ö–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–¥—ã—Öüòå", body: "–í—Ä–µ–º—è –¥–ª—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –æ—Ç–¥—ã—Ö–∞", identifier: "shortRestNotification")
                    }
                    startShortRest()
                }
            }
        } else {
            time -= 1 // –£–º–µ–Ω—å—à–∞–µ–º –≤—Ä–µ–º—è –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
            timeLabel.text = formatTime(time: time)
            AnimationManager.updateAnimation(time: time, selectedTask: selectedTask)
        }
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—á–µ–π —Å–µ—Å—Å–∏–∏
    func startWorkSession() {
        guard let task = selectedTask else {
            print("selectedTask is nil")
            return
        }
        if let soundManager = soundManager {
            soundManager.playSound(fileName: "mew", type: "mp3", isRepeated: false)
        } else {
            print("soundManager is nil")
        }
        
        if task.canNotify {
            // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –¥–ª–∏–Ω–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞
            print("\(task.canNotify)")
            scheduleNotification(title: "–ó–∞ –¥–µ–ª–æ!‚è∞", body: "–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—á–µ–π —Å–µ—Å—Å–∏–∏", identifier: "WorkSessionNotification")
        }
        isRestingInternal = false
        motivationLabel.text="–ó–∞ –¥–µ–ª–æ!"
        isSessionStarted = true
        time = Int(task.sessionDuration) * 60
        startButton.setTitle("–ü–∞—É–∑–∞", for: .normal)
        startButton.backgroundColor = .catodoroMidGreen
        stopButton.backgroundColor = .catodoroRed
        AnimationManager.drawForeLayer(color: "CatodoroGreen", catImage: catImage)
        AnimationManager.foreProgressLayer.strokeEnd = 0
        startTimer()
        DispatchQueue.main.async { [self] in
            AnimationManager.startAnimation(duration: CFTimeInterval(time))
        }
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –æ—Ç–¥—ã—Ö–∞
    func startShortRest() {
        guard let task = selectedTask else { return }
        if let soundManager = soundManager {
            soundManager.playSound(fileName: "rrrrr", type: "mp3", isRepeated: false)
        } else {
            print("soundManager is nil")
        }
        timeLabel.text="\(task.shortRestDuration):00"
        motivationLabel.text="–û—Ç–¥—ã—Ö–∞–πüòå"
        time = Int(task.shortRestDuration) * 60
        isRestingInternal = true
        AnimationManager.drawForeLayer(color: "CatodoroRed", catImage: catImage)
        AnimationManager.foreProgressLayer.strokeEnd = 0 // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ strokeEnd –≤ 0
        startTimer() // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
        DispatchQueue.main.async { [self] in
            AnimationManager.startAnimation(duration: CFTimeInterval(time))
        }
        startButton.setTitle("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", for: .normal)
        
        
    }
    // –ú–µ—Ç–æ–¥ –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞
    func startLongRest() {
        guard let task = selectedTask else { return }
        if let soundManager = soundManager {
            soundManager.playSound(fileName: "rrrrr", type: "mp3", isRepeated: false)
        } else {
            print("soundManager is nil")
        }
        motivationLabel.text="–û—Ç–¥—ã—Ö–∞–πüòå"
        timeLabel.text="\(task.longRestDuration):00"
        time = Int(task.longRestDuration) * 60
        isRestingInternal = true
        AnimationManager.drawForeLayer(color: "CatodoroDarkPurp", catImage: catImage)
        AnimationManager.foreProgressLayer.strokeEnd = 0 // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ strokeEnd –≤ 0
        startTimer() // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
        DispatchQueue.main.async { [self] in
            AnimationManager.startAnimation(duration: CFTimeInterval(time))
        }// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
        startButton.setTitle("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", for: .normal)
    }
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    func scheduleNotification(title: String, body: String, identifier: String) {
        let content = UNMutableNotificationContent()
        content.title = title
        content.body = body
        content.sound = UNNotificationSound.default
        
        let trigger = UNTimeIntervalNotificationTrigger(timeInterval: 1, repeats: false)
        let request = UNNotificationRequest(identifier: identifier, content: content, trigger: trigger)
        
        let center = UNUserNotificationCenter.current()
        center.add(request) { error in
            if let error = error {
                print("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: \(error.localizedDescription)")
            }
        }
    }
    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ–≤–µ—Ä–ª–µ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    func showCompletionOverlay() {
        stopButton.isEnabled = false
        circlePauseLayer.removeFromSuperlayer()
        pauseImage.removeFromSuperview()
        if let soundManager = soundManager {
            soundManager.playSound(fileName: "happysound", type: "mp3", isRepeated: true)
        } else {
            print("soundManager is nil")
        }
        
        let overlayView = UIView(frame: view.bounds)
        overlayView.backgroundColor = UIColor.white.withAlphaComponent(0.7)
        view.addSubview(overlayView)
        
        let gifImageView = UIImageView(frame: CGRect(x: overlayView.frame.midX - 90, y: overlayView.frame.midY - 30, width: 150, height: 200))
        gifImageView.center = CGPoint(x: gifImageView.center.x, y: gifImageView.center.y)
        
        if let gifURL = Bundle.main.url(forResource: "cat-dance-funny", withExtension: "gif"),
           let gifData = try? Data(contentsOf: gifURL) {
            gifImageView.image = UIImage.gifImageWithData(gifData)
        }
        overlayView.addSubview(gifImageView)
        
        bannerLabel.frame = CGRect(x: view.bounds.midX - view.bounds.width / 2, y: view.bounds.midY - 100, width: view.bounds.width, height: 100)
        bannerLabel.text = "–£—Ä–∞!\n–¢—ã –º–æ–ª–æ–¥–µ—Ü!"
        bannerLabel.font = UIFont(name: "AnonymousPro-Regular", size: 40)
        bannerLabel.numberOfLines = 2
        bannerLabel.lineBreakMode = .byWordWrapping
        bannerLabel.textAlignment = .center
        bannerLabel.textColor = .catodoroBlack
        view.addSubview(bannerLabel)
        let tapGesture = UITapGestureRecognizer(target: self, action: #selector(dismissOverlay(_:)))
        overlayView.addGestureRecognizer(tapGesture)
        startButton.setTitle("–°—Ç–∞—Ä—Ç", for: .normal)
        startButton.backgroundColor = UIColor(red: 1, green: 1, blue: 1, alpha: 0.5)
        stopButton.setTitle("–°—Ç–æ–ø", for: .normal)
        stopButton.backgroundColor = UIColor(red: 1, green: 1, blue: 1, alpha: 0.5)
        isTimerStarted = false
        AnimationManager.resetAnimation()
    }
    // –ú–µ—Ç–æ–¥ —Å–∫—Ä—ã—Ç–∏—è —Å–ª–æ—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    @objc  func dismissOverlay(_ sender: UITapGestureRecognizer) {
        sender.view?.removeFromSuperview()
        bannerLabel.removeFromSuperview()
        if let soundManager = soundManager {
            soundManager.stopSound()
        } else {
            print("soundManager is nil")
        }
        
    }
    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ CoreData
    func updateTaskReadiness(task: TaskModel) {
        saveContext()
    }
    // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ CoreData
    func saveContext() {
        guard let appDelegate = UIApplication.shared.delegate as? AppDelegate else { return }
        let context = appDelegate.persistentContainer.viewContext
        do {
            try context.save()
            print("–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ.")
        } catch {
            print("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: \(error.localizedDescription)")
        }
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    func changeReadinessImages() {
        _ = readyImages[currentreadyIndex]
        let notReadyImageName = notreadyImages[currentreadyIndex]
        
        var imageIndex = 0
        for rowStackView in readinessStackView.arrangedSubviews {
            if let row = rowStackView as? UIStackView {
                for imageView in row.arrangedSubviews {
                    if let imageView = imageView as? UIImageView {
                        imageView.image = UIImage(named: notReadyImageName) // –ú–µ–Ω—è–µ–º –Ω–∞ –Ω–µ –≥–æ—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    }
                    imageIndex += 1
                }
            }
        }
    }
    // –ú–µ—Ç–æ–¥ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Ü–≤–µ—Ç–Ω–æ–µ
    func changeImage(imageIndex: Int) {
        guard imageIndex < catImages.count else { return }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ imageIndex –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        var totalImages = 0
        for rowStackView in readinessStackView.arrangedSubviews {
            if let row = rowStackView as? UIStackView {
                totalImages += row.arrangedSubviews.count
            }
        }
        if imageIndex >= totalImages {
            return // –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º, –≤—ã—Ö–æ–¥–∏–º –∏–∑ –º–µ—Ç–æ–¥–∞
        }
        var currentIndex = 0
        for rowStackView in readinessStackView.arrangedSubviews {
            if let row = rowStackView as? UIStackView {
                for imageView in row.arrangedSubviews {
                    if currentIndex == imageIndex, let imageView = imageView as? UIImageView {
                        // –ú–µ–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ "–≥–æ—Ç–æ–≤–æ–µ" –∏–∑ –º–∞—Å—Å–∏–≤–∞ readyImages
                        imageView.image = UIImage(named: readyImages[currentreadyIndex])
                        return
                    }
                    currentIndex += 1
                }
            }
        }
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    func updateReadinessPanel(sessionNumber: Int) {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–¥–≤–∏–¥—ã –∏–∑ readinessStackView
        readinessStackView.arrangedSubviews.forEach { $0.removeFromSuperview() }
        let maxImagesPerRow = 5
        var currentHorizontalStackView = UIStackView()
        currentHorizontalStackView.axis = .horizontal
        currentHorizontalStackView.alignment = .center
        currentHorizontalStackView.distribution = .fillEqually
        currentHorizontalStackView.spacing = 3
        for i in 0..<sessionNumber {
            if i % maxImagesPerRow == 0 && i != 0 {
                readinessStackView.addArrangedSubview(currentHorizontalStackView)
                currentHorizontalStackView = UIStackView()
                currentHorizontalStackView.axis = .horizontal
                currentHorizontalStackView.alignment = .center
                currentHorizontalStackView.distribution = .fillEqually
                currentHorizontalStackView.spacing = 3
            }
            let readyImage = UIImageView(image: UIImage(named: notreadyImages[currentreadyIndex]))
            readyImage.contentMode = .scaleAspectFit
            readyImage.translatesAutoresizingMaskIntoConstraints = false
            readyImage.heightAnchor.constraint(equalToConstant: 50).isActive = true
            readyImage.widthAnchor.constraint(equalToConstant: 50).isActive = true
            currentHorizontalStackView.addArrangedSubview(readyImage)
        }
        readinessStackView.addArrangedSubview(currentHorizontalStackView)
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –ø–∞–Ω–µ–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫
        let numberOfRows = (sessionNumber + maxImagesPerRow - 1) / maxImagesPerRow
        let panelHeight = CGFloat(numberOfRows * 55)
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤—ã—Å–æ—Ç–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        readinessPanel.constraints.forEach { constraint in
            if constraint.firstAttribute == .height {
                readinessPanel.removeConstraint(constraint)
            }
        }
        
        let newHeightConstraint = readinessPanel.heightAnchor.constraint(equalToConstant: panelHeight)
        newHeightConstraint.isActive = true
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ—Ä—Ö–Ω–µ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏
        readinessPanel.superview?.constraints.forEach { constraint in
            if constraint.firstAttribute == .top && constraint.firstItem as? UIView == readinessPanel {
                readinessPanel.superview?.removeConstraint(constraint)
            }
        }
        
        let newTopConstraint = readinessPanel.topAnchor.constraint(equalTo: view.topAnchor, constant: sessionNumber > 5 ? 650 : 670)
        newTopConstraint.isActive = true
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        UIView.animate(withDuration: 0.3) {
            self.view.layoutIfNeeded()
        }
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    @objc  func updateReadinessImage(notification: Notification) {
        if let userInfo = notification.userInfo, let currentreadyIndex = userInfo["currentreadyIndex"] as? Int {
            self.currentreadyIndex = currentreadyIndex
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ –ø–∞–Ω–µ–ª–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            updateReadinessPanel(sessionNumber: sessionNumber)
        }
    }
    
    //–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    func updateReadiness(imageIndex: Int) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ imageIndex –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        var totalImages = 0
        for rowStackView in readinessStackView.arrangedSubviews {
            if let row = rowStackView as? UIStackView {
                totalImages += row.arrangedSubviews.count
            }
        }
        if imageIndex >= totalImages {
            return // –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º, –≤—ã—Ö–æ–¥–∏–º –∏–∑ –º–µ—Ç–æ–¥–∞
        }
        var currentIndex = 0
        for rowStackView in readinessStackView.arrangedSubviews {
            if let row = rowStackView as? UIStackView {
                for imageView in row.arrangedSubviews {
                    if currentIndex == imageIndex, let imageView = imageView as? UIImageView {
                        // –ú–µ–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ "–≥–æ—Ç–æ–≤–æ–µ" –∏–∑ –º–∞—Å—Å–∏–≤–∞ readyImages
                        imageView.image = UIImage(named: readyImages[currentreadyIndex])
                        return
                    }
                    currentIndex += 1
                }
            }
        }
    }
    
    //–û—á–∏—Å—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    func clearImage() {
        var imageIndex = 0
        for rowStackView in readinessStackView.arrangedSubviews {
            if let row = rowStackView as? UIStackView {
                for imageView in row.arrangedSubviews {
                    if imageIndex >= sessionNumber {
                        return
                    }
                    
                    if let imageView = imageView as? UIImageView {
                        // –ú–µ–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ "–Ω–µ –≥–æ—Ç–æ–≤–æ–µ" –∏–∑ –º–∞—Å—Å–∏–≤–∞ notreadyImages
                        imageView.image = UIImage(named: notreadyImages[currentreadyIndex])
                    }
                    imageIndex += 1
                }
            }
        }
    }
    // –û—á–∏—Å—Ç–∫–∞ –ø–∞–Ω–µ–ª–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    func clearReadinessPanel() {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–¥–≤–∏–¥—ã –∏–∑ readinessStackView
        readinessStackView.arrangedSubviews.forEach { $0.removeFromSuperview() }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É –ø–∞–Ω–µ–ª–∏
        readinessPanel.constraints.forEach { constraint in
            if constraint.firstAttribute == .height {
                readinessPanel.removeConstraint(constraint)
            }
        }
        
        let newHeightConstraint = readinessPanel.heightAnchor.constraint(greaterThanOrEqualToConstant: 60)
        newHeightConstraint.isActive = true
        
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –≤–µ—Ä—Ö–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        readinessPanel.superview?.constraints.forEach { constraint in
            if constraint.firstAttribute == .top && constraint.firstItem as? UIView == readinessPanel {
                readinessPanel.superview?.removeConstraint(constraint)
            }
        }
        
        let newTopConstraint = readinessPanel.topAnchor.constraint(equalTo: view.topAnchor, constant: 670)
        newTopConstraint.isActive = true
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        UIView.animate(withDuration: 0.3) {
            self.view.layoutIfNeeded()
        }
    }
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞
    func setupInitialState() {
        startButton.setTitle("–°—Ç–∞—Ä—Ç", for: .normal)
        startButton.backgroundColor = UIColor(red: 1, green: 1, blue: 1, alpha: 0.5)
        stopButton.setTitle("–°—Ç–æ–ø", for: .normal)
        stopButton.backgroundColor = UIColor(red: 1, green: 1, blue: 1, alpha: 0.5)
        
        timeLabel.text = "00:00"
    }
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
    func setSelectedTask(task: TaskModel) {
        selectedTask = task
    }
}
