import UIKit
// –ü—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –¥–µ–ª–µ–≥–∞—Ç–∞ CustomAlertViewController
protocol CustomAlertViewControllerDelegate: AnyObject {
    func customAlertViewController(_ controller: CustomAlertViewController, didAddTask task: TaskModel)
    func customAlertViewController(_ controller: CustomAlertViewController, didDeleteTask task: TaskModel)
}
// –ö–ª–∞—Å—Å CustomAlertViewController, –Ω–∞—Å–ª–µ–¥—É–µ–º—ã–π –æ—Ç UIViewController –∏ –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π –ø—Ä–æ—Ç–æ–∫–æ–ª—ã UIPickerViewDelegate, UIPickerViewDataSource, UITextFieldDelegate
class CustomAlertViewController: UIViewController, UIPickerViewDelegate, UIPickerViewDataSource, UITextFieldDelegate {
    // –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä TasksViewController
    var tasksViewController: TasksViewController?
    // –°–ª–∞–±–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –¥–µ–ª–µ–≥–∞—Ç CustomAlertViewControllerDelegate
    weak var delegate: CustomAlertViewControllerDelegate?
    var taskToEdit: TaskModel?
    // –ö–æ–Ω—Ç–µ–∫—Å—Ç CoreData
    let context = (UIApplication.shared.delegate as! AppDelegate).persistentContainer.viewContext
    // –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏
    private let titleTextField: UITextField = {
        let textField = UITextField()
        textField.font = UIFont(name: "AnonymousPro-Regular", size: 24)
        textField.textColor = .black
        textField.textAlignment = .center
        textField.borderStyle = .none
        textField.backgroundColor = .clear
        textField.placeholder = "–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞"
        return textField
    }()
    // –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
    private let subtitleTextField: UITextField = {
        let textField = UITextField()
        textField.font = UIFont(name: "AnonymousPro-Regular", size: 20)
        textField.textColor = .black
        textField.textAlignment = .center
        textField.borderStyle = .none
        textField.backgroundColor = .clear
        textField.placeholder = "–° –Ω–µ–π —è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–ø—Ä–∞–≤–ª—é—Å—å"
        return textField
    }()
    // –°—Ç–µ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    private var buttonStackView: UIStackView!
    // –õ—ç–π–±–ª –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    private let notifLabel = UILabel()
    // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    private let containerView = UIView()
    // –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    private let deleteButton = UIButton(type: .system)
    // –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    private let saveButton = UIButton(type: .system)
    // –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–µ—Å—Å–∏–π
    private let sessionNumberButton = UIButton(type: .system)
    // –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏
    private let sessionDurationButton = UIButton(type: .system)
    // –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –æ—Ç–¥—ã—Ö–∞
    private let shortRestDurationButton = UIButton(type: .system)
    // –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª–∏–Ω–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞
    private let longRestDurationButton = UIButton(type: .system)
    // –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—É—Å–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞
    private let longRestTimeButton = UIButton(type: .system)
    // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á–∏
    @objc private  let readytaskButton = UIButton(type: .system)
    // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
    private let datePickerButton = UIButton(type: .system)
    // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    private let notifySwitch = UISwitch()
    // –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è UIPickerView
    private var pickerView = UIPickerView()
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è UIPickerView
    var pickerLabel = UILabel()
    // –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞
    private var selectedButton: UIButton?
    // –¥–∞—Ç–∞ –∑–∞–¥–∞—á–∏
    private var taskDate = Date()
    let bannerLabel = UILabel()
    private var selectedValue: String?
    private let datePicker: UIDatePicker = {
        let picker = UIDatePicker()
        picker.datePickerMode = .date
        picker.preferredDatePickerStyle = .wheels
        
        return picker
    }()
    // –ö–Ω–æ–ø–∫–∞ "–ì–æ—Ç–æ–≤–æ"
    private var doneButton: UIButton!
    // –ö–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∞"
    private var cancelButton: UIButton!
    // –¢–µ–∫—É—â–µ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ UIPickerView
    private var currentPickerView: UIView?
    override func viewDidLoad() {
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        overrideUserInterfaceStyle = .light
        super.viewDidLoad()
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        setupView()
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∏–∫–µ—Ä–∞ –¥–∞—Ç—ã
        setupDatePicker()
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ–ª–µ–≥–∞—Ç–æ–≤ –¥–ª—è –ø–∏–∫–µ—Ä–∞ –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
        pickerView.delegate = self
        pickerView.dataSource = self
        setupTextFields()
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Ç–∞–ø–∞
        setupTapGesture()
        // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ —Ç–∞–∫–æ–≤–∞—è –∏–º–µ–µ—Ç—Å—è
        if let task = taskToEdit {
            fillFields(with: task)
        } else {
            resetFields()
        }
    }
    // –ú–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    func setDeleteButtonTitle(_ title: String) {
        deleteButton.setTitle(title, for: .normal)
    }
    // –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∏
    internal func fillFields(with task: TaskModel) {
        titleTextField.text = task.title
        subtitleTextField.text = task.subtitle
        sessionNumber = Int(task.sessionNumber)
        sessionDuration = Int(task.sessionDuration)
        shortRestDuration = Int(task.shortRestDuration)
        longRestDuration = Int(task.longRestDuration)
        longRestTime = Int(task.longRestTime)
        readinessNumber = Int(task.readinessNumber)
        taskDate = task.taskDate ?? Date()  // –ï—Å–ª–∏ taskDate nil, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        notifySwitch.isOn = task.canNotify
        sessionNumberButton.setTitle("\(sessionNumber)\nüü£", for: .normal)
        sessionDurationButton.setTitle("\(sessionDuration)\n–º–∏–Ω", for: .normal)
        shortRestDurationButton.setTitle("\(shortRestDuration)\n–º–∏–Ω", for: .normal)
        longRestDurationButton.setTitle("\(longRestDuration)\n–º–∏–Ω", for: .normal)
        longRestTimeButton.setTitle("\(longRestTime)\nüü£", for: .normal)
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "dd.MM.yyyy"
        let dateString = dateFormatter.string(from: taskDate)
        datePickerButton.setTitle(dateString, for: .normal)
        if taskToEdit != nil {
            deleteButton.setTitle("–£–¥–∞–ª–∏—Ç—å", for: .normal)
        } else {
            deleteButton.setTitle("–û—Ç–º–µ–Ω–∞", for: .normal)
        }
    }
    // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–æ–ª–µ–π –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    internal func resetFields() {
        taskToEdit = nil
        titleTextField.text = ""
        subtitleTextField.text = ""
        sessionNumber = 5
        sessionDuration = 25
        shortRestDuration = 5
        longRestDuration = 15
        longRestTime = 3
        notifySwitch.isOn = false
        datePickerButton.setTitle("–ö–æ–≥–¥–∞?‚è∞", for: .normal)
        setDeleteButtonTitle("–û—Ç–º–µ–Ω–∞")
        sessionNumberButton.setTitle("\(sessionNumber)\nüü£", for: .normal)
        sessionDurationButton.setTitle("\(sessionDuration)\n–º–∏–Ω", for: .normal)
        shortRestDurationButton.setTitle("\(shortRestDuration)\n–º–∏–Ω", for: .normal)
        longRestDurationButton.setTitle("\(longRestDuration)\n–º–∏–Ω", for: .normal)
        longRestTimeButton.setTitle("\(longRestTime)\nüü£", for: .normal)
        taskDate = Date()
        datePicker.date = taskDate
    }
    // –ú–µ—Ç–æ–¥ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    private func setupView() {
        view.backgroundColor = UIColor.white.withAlphaComponent(0)
        containerView.backgroundColor = .white
        containerView.layer.cornerRadius = 25
        containerView.layer.borderWidth = 1
        containerView.layer.borderColor = UIColor.black.cgColor
        containerView.addSubview(titleTextField)
        containerView.addSubview(subtitleTextField)
        deleteButton.setTitle("–£–¥–∞–ª–∏—Ç—å", for: .normal)
        deleteButton.titleLabel?.font = UIFont(name: "AnonymousPro-Regular", size: 18)
        deleteButton.backgroundColor = .catodoroRed
        deleteButton.layer.borderColor = UIColor.black.cgColor
        deleteButton.layer.borderWidth = 1
        deleteButton.layer.cornerRadius = 15
        deleteButton.setTitleColor(.black, for: .normal)
        deleteButton.addTarget(self, action: #selector(deleteButtonTapped), for: .touchUpInside)
        containerView.addSubview(deleteButton)
        
        readytaskButton.setImage(UIImage(named: "mainbutton2")?.withRenderingMode(.alwaysOriginal), for: .normal)
        readytaskButton.addTarget(self, action: #selector(readytaskButtonTapped), for: .touchUpInside)
        
        saveButton.setTitle("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", for: .normal)
        saveButton.titleLabel?.font = UIFont(name: "AnonymousPro-Regular", size: 18)
        saveButton.backgroundColor = .catodoroMidGreen
        saveButton.layer.borderColor = UIColor.black.cgColor
        saveButton.layer.borderWidth = 1
        saveButton.layer.cornerRadius = 15
        saveButton.setTitleColor(.black, for: .normal)
        saveButton.addTarget(self, action: #selector(saveButtonTapped), for: .touchUpInside)
        containerView.addSubview(saveButton)
        
        titleTextField.text = "–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞"
        subtitleTextField.text = "–° –Ω–µ–π —è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–ø—Ä–∞–≤–ª—é—Å—å!"
        
        let buttonsStackView = UIStackView()
        buttonsStackView.axis = .horizontal
        buttonsStackView.alignment = .center
        buttonsStackView.spacing = 5
        buttonsStackView.distribution = .fillEqually
        containerView.addSubview(buttonsStackView)
        
        sessionNumberButton.setTitle("\(sessionNumber)\nüü£ ", for: .normal)
        sessionNumberButton.setTitleColor(UIColor.black, for: .normal)
        sessionNumberButton.titleLabel?.font = UIFont(name: "AnonymousPro-Regular", size: 20)
        sessionNumberButton.titleLabel?.lineBreakMode = .byCharWrapping
        sessionNumberButton.titleLabel?.numberOfLines=2
        sessionNumberButton.titleLabel?.textAlignment = .center
        sessionNumberButton.addTarget(self, action: #selector(sessionNumberButtonTapped), for: .touchUpInside)
        buttonsStackView.addArrangedSubview(sessionNumberButton)
        
        sessionDurationButton.setTitle("\(sessionDuration)\n–º–∏–Ω", for: .normal)
        sessionDurationButton.setTitleColor(UIColor.black, for: .normal)
        sessionDurationButton.titleLabel?.font = UIFont(name: "AnonymousPro-Regular", size: 20)
        sessionDurationButton.titleLabel?.lineBreakMode = .byCharWrapping
        sessionDurationButton.titleLabel?.textAlignment = .center
        sessionDurationButton.titleLabel?.numberOfLines=2
        sessionDurationButton.addTarget(self, action: #selector(sessionDurationButtonTapped), for: .touchUpInside)
        buttonsStackView.addArrangedSubview(sessionDurationButton)
        
        shortRestDurationButton.setTitle("\(shortRestDuration)\n–º–∏–Ω", for: .normal)
        shortRestDurationButton.setTitleColor(UIColor.black, for: .normal)
        shortRestDurationButton.titleLabel?.font = UIFont(name: "AnonymousPro-Regular", size: 20)
        shortRestDurationButton.titleLabel?.lineBreakMode = .byCharWrapping
        shortRestDurationButton.titleLabel?.numberOfLines=2
        shortRestDurationButton.titleLabel?.textAlignment = .center
        shortRestDurationButton.addTarget(self, action: #selector(shortRestDurationButtonTapped), for: .touchUpInside)
        buttonsStackView.addArrangedSubview(shortRestDurationButton)
        
        longRestDurationButton.setTitle("\(longRestDuration)\n–º–∏–Ω", for: .normal)
        longRestDurationButton.setTitleColor(UIColor.black, for: .normal)
        longRestDurationButton.titleLabel?.font = UIFont(name: "AnonymousPro-Regular", size: 20)
        longRestDurationButton.titleLabel?.lineBreakMode = .byCharWrapping
        longRestDurationButton.titleLabel?.numberOfLines=2
        longRestDurationButton.titleLabel?.textAlignment = .center
        longRestDurationButton.addTarget(self, action: #selector(longRestDurationButtonTapped), for: .touchUpInside)
        buttonsStackView.addArrangedSubview(longRestDurationButton)
        
        longRestTimeButton.setTitle("\(longRestTime)\nüü£", for: .normal)
        longRestTimeButton.setTitleColor(UIColor.black, for: .normal)
        longRestTimeButton.titleLabel?.font = UIFont(name: "AnonymousPro-Regular", size: 20)
        longRestTimeButton.titleLabel?.lineBreakMode = .byCharWrapping
        longRestTimeButton.titleLabel?.numberOfLines=2
        longRestTimeButton.titleLabel?.textAlignment = .center
        longRestTimeButton.addTarget(self, action: #selector(longRestTimeButtonTapped), for: .touchUpInside)
        buttonsStackView.addArrangedSubview(longRestTimeButton) // –¥–æ–±–∞–≤–∏–ª–∏ –∫–Ω–æ–ø–∫—É –≤ —Å—Ç–µ–∫
        
        let bottomStackView = UIStackView()
        bottomStackView.axis = .horizontal
        bottomStackView.alignment = .center
        bottomStackView.spacing = 5// —É–º–µ–Ω—å—à–∏–ª–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∫–Ω–æ–ø–∫–∞–º–∏
        bottomStackView.distribution = .equalCentering
        containerView.addSubview(bottomStackView)
        
        bottomStackView.addArrangedSubview(notifLabel)
        notifLabel.text="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
        notifLabel.textColor = .catodoroBlack
        notifLabel.font = UIFont(name: "AnonymousPro-Regular", size: 20)
        
        bottomStackView.addArrangedSubview(notifySwitch) //
        notifySwitch.layer.borderColor = UIColor.black.cgColor
        notifySwitch.layer.borderWidth = 1
        notifySwitch.layer.cornerRadius=15
        notifySwitch.onTintColor = .catodoroMidGreen
        notifySwitch.tintColor = .catodoroRed
        notifySwitch.backgroundColor = .catodoroRed
        notifySwitch.isOn = false
        
        containerView.addSubview(datePickerButton)
        datePickerButton.layer.borderColor = UIColor.black.cgColor
        datePickerButton.layer.cornerRadius = 15
        datePickerButton.layer.borderWidth = 1
        datePickerButton.backgroundColor = .catodoroLightPurple
        datePickerButton.setTitle("–ö–æ–≥–¥–∞?‚è∞", for: .normal)
        datePickerButton.setTitleColor(UIColor.black, for: .normal)
        datePickerButton.titleLabel?.font = UIFont(name: "AnonymousPro-Regular", size: 20)
        datePickerButton.addTarget(self, action: #selector(datePickerButtonTapped), for: .touchUpInside)
        
        datePicker.backgroundColor = .catodoroLightPurple
        datePicker.layer.cornerRadius=25
        datePicker.layer.borderColor = UIColor.black.cgColor
        datePicker.layer.borderWidth = 1
        datePicker.addTarget(self, action: #selector(dateChanged(_:)), for: .valueChanged)
        datePicker.isHidden = true
        view.addSubview(containerView)
        view.addSubview(readytaskButton)
        containerView.addSubview(datePicker)
        
        containerView.translatesAutoresizingMaskIntoConstraints = false
        titleTextField.translatesAutoresizingMaskIntoConstraints = false
        subtitleTextField.translatesAutoresizingMaskIntoConstraints = false
        deleteButton.translatesAutoresizingMaskIntoConstraints = false
        saveButton.translatesAutoresizingMaskIntoConstraints = false
        buttonsStackView.translatesAutoresizingMaskIntoConstraints = false
        bottomStackView.translatesAutoresizingMaskIntoConstraints = false
        datePickerButton.translatesAutoresizingMaskIntoConstraints = false
        notifLabel.translatesAutoresizingMaskIntoConstraints = false
        notifySwitch.translatesAutoresizingMaskIntoConstraints = false
        readytaskButton.translatesAutoresizingMaskIntoConstraints = false
        
        NSLayoutConstraint.activate([
            containerView.centerYAnchor.constraint(equalTo: view.centerYAnchor,constant: -60),
            containerView.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            containerView.widthAnchor.constraint(equalToConstant: 350),
            containerView.heightAnchor.constraint(equalToConstant: 340),
            
            titleTextField.topAnchor.constraint(equalTo: containerView.topAnchor, constant: 10),
            titleTextField.centerXAnchor.constraint(equalTo: containerView.centerXAnchor),
            titleTextField.widthAnchor.constraint(equalTo: containerView.widthAnchor, constant: -40),
            titleTextField.heightAnchor.constraint(equalToConstant: 40),
            
            subtitleTextField.topAnchor.constraint(equalTo: titleTextField.bottomAnchor, constant: 5),
            subtitleTextField.centerXAnchor.constraint(equalTo: containerView.centerXAnchor),
            subtitleTextField.widthAnchor.constraint(equalTo: containerView.widthAnchor, constant: -20),
            subtitleTextField.heightAnchor.constraint(equalToConstant: 40),
            
            buttonsStackView.topAnchor.constraint(equalTo: subtitleTextField.bottomAnchor, constant: 10),
            buttonsStackView.centerXAnchor.constraint(equalTo: containerView.centerXAnchor),
            buttonsStackView.widthAnchor.constraint(equalTo: containerView.widthAnchor, constant: -40),
            buttonsStackView.heightAnchor.constraint(equalToConstant: 40),
            
            bottomStackView.topAnchor.constraint(equalTo: datePickerButton.bottomAnchor, constant: 20),
            bottomStackView.centerXAnchor.constraint(equalTo: containerView.centerXAnchor),
            bottomStackView.widthAnchor.constraint(equalTo: containerView.widthAnchor, constant: -145),
            bottomStackView.heightAnchor.constraint(equalToConstant: 40),
            
            datePickerButton.topAnchor.constraint(equalTo: buttonsStackView.bottomAnchor, constant: 20),
            datePickerButton.centerXAnchor.constraint(equalTo: containerView.centerXAnchor),
            datePickerButton.widthAnchor.constraint(equalTo: containerView.widthAnchor, constant: -165),
            datePickerButton.heightAnchor.constraint(equalToConstant: 40),
            
            deleteButton.leadingAnchor.constraint(equalTo: containerView.leadingAnchor, constant: 20),
            deleteButton.bottomAnchor.constraint(equalTo: containerView.bottomAnchor, constant: -20),
            deleteButton.widthAnchor.constraint(equalToConstant: 100),
            deleteButton.heightAnchor.constraint(equalToConstant: 40),
            
            readytaskButton.centerXAnchor.constraint(equalTo: containerView.centerXAnchor),
            readytaskButton.bottomAnchor.constraint(equalTo: containerView.bottomAnchor, constant: 17),
            readytaskButton.widthAnchor.constraint(equalToConstant: 75),
            readytaskButton.heightAnchor.constraint(equalToConstant: 75),
            
            saveButton.trailingAnchor.constraint(equalTo: containerView.trailingAnchor, constant: -20),
            saveButton.bottomAnchor.constraint(equalTo: containerView.bottomAnchor, constant: -20),
            saveButton.widthAnchor.constraint(equalToConstant: 100),
            saveButton.heightAnchor.constraint(equalToConstant: 40),
            
            datePicker.trailingAnchor.constraint(equalTo: containerView.trailingAnchor),
            datePicker.widthAnchor.constraint(equalToConstant: 350)
            
        ])
        pickerView.delegate = self
        pickerView.dataSource = self
        pickerView.isHidden = true
        pickerView.backgroundColor = .catodoroLightPurple
        pickerView.layer.cornerRadius=25
        pickerView.layer.borderColor = UIColor.catodoroBlack.cgColor
        pickerView.layer.borderWidth=1
        view.addSubview(pickerView)
        pickerView.translatesAutoresizingMaskIntoConstraints = false
        pickerLabel.textAlignment = .center
        pickerLabel.font = UIFont(name: "AnonymousPro-Bold", size: 20)
        pickerLabel.isHidden = true
        view.addSubview(pickerLabel)
        pickerLabel.translatesAutoresizingMaskIntoConstraints = false
        
        NSLayoutConstraint.activate([
            pickerLabel.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            pickerLabel.bottomAnchor.constraint(equalTo: pickerView.topAnchor, constant: -5),
            
            pickerView.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            pickerView.bottomAnchor.constraint(equalTo: view.bottomAnchor,constant: -70),
            pickerView.widthAnchor.constraint(equalTo: containerView.widthAnchor),
            pickerView.heightAnchor.constraint(equalToConstant: 200)
        ])
    }
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
    private func setupTextFields() {
        titleTextField.delegate = self
        subtitleTextField.delegate = self
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —ç–∫—Ä–∞–Ω
    private func setupTapGesture() {
        let tapGesture = UITapGestureRecognizer(target: self, action: #selector(dismissKeyboard))
        view.addGestureRecognizer(tapGesture)
    }
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∏–∫–µ—Ä–∞ –¥–∞—Ç—ã
    private func setupDatePicker() {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UIDatePicker
        datePicker.backgroundColor = .catodoroLightPurple
        datePicker.layer.cornerRadius = 15
        datePicker.layer.borderColor = UIColor.black.cgColor
        datePicker.layer.borderWidth = 1
        datePicker.addTarget(self, action: #selector(dateChanged(_:)), for: .valueChanged)
        datePicker.isHidden = true
        datePicker.layer.masksToBounds = true
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        let doneButton = UIButton(type: .system)
        doneButton.setTitle("–ì–æ—Ç–æ–≤–æ", for: .normal)
        doneButton.titleLabel?.font = UIFont(name: "AnonymousPro-Regular", size: 18)
        doneButton.setTitleColor(UIColor.black, for: .normal)
        doneButton.backgroundColor = .catodoroMidGreen
        doneButton.layer.cornerRadius = 15
        doneButton.layer.borderColor = UIColor.black.cgColor
        doneButton.layer.borderWidth = 1
        doneButton.addTarget(self, action: #selector(doneButtonTapped), for: .touchUpInside)
        
        let cancelButton = UIButton(type: .system)
        cancelButton.setTitle("–û—Ç–º–µ–Ω–∞", for: .normal)
        cancelButton.setTitleColor(UIColor.black, for: .normal)
        cancelButton.titleLabel?.font = UIFont(name: "AnonymousPro-Regular", size: 18)
        cancelButton.layer.cornerRadius = 15
        cancelButton.backgroundColor = .catodoroRed
        cancelButton.layer.borderColor = UIColor.black.cgColor
        cancelButton.layer.borderWidth = 1
        cancelButton.addTarget(self, action: #selector(cancelButtonTapped), for: .touchUpInside)
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UIStackView
        buttonStackView = UIStackView(arrangedSubviews: [cancelButton, doneButton])
        buttonStackView.axis = .horizontal
        buttonStackView.distribution = .fillEqually
        buttonStackView.spacing = 95
        buttonStackView.isHidden = true
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ view
        view.addSubview(buttonStackView)
        view.addSubview(datePicker)
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Auto Layout
        buttonStackView.translatesAutoresizingMaskIntoConstraints = false
        datePicker.translatesAutoresizingMaskIntoConstraints = false
        
        NSLayoutConstraint.activate([
            buttonStackView.leadingAnchor.constraint(equalTo: containerView.leadingAnchor,constant: 30),
            buttonStackView.trailingAnchor.constraint(equalTo: containerView.trailingAnchor,constant: -30),
            buttonStackView.topAnchor.constraint(equalTo: datePicker.bottomAnchor, constant: 10),
            buttonStackView.heightAnchor.constraint(equalToConstant: 40),
            
            datePicker.leadingAnchor.constraint(equalTo: pickerView.leadingAnchor),
            datePicker.trailingAnchor.constraint(equalTo: pickerView.trailingAnchor),
            datePicker.bottomAnchor.constraint(equalTo: pickerView.bottomAnchor),
            datePicker.widthAnchor.constraint(equalTo: pickerView.widthAnchor)
        ])
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"
    @objc private func saveButtonTapped() {
        let isEditing = taskToEdit != nil
        guard let dateText = datePickerButton.titleLabel?.text, dateText != "–ö–æ–≥–¥–∞?‚è∞" else { return }
        guard let title = titleTextField.text, !title.isEmpty else {
            print("Title is empty")
            return
        }
        guard longRestTime <= sessionNumber else {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            let alert = UIAlertController(title: "–û—à–∏–±–∫–∞", message: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö —Å–µ—Å—Å–∏–π –ø–µ—Ä–µ–¥ –¥–ª–∏–Ω–Ω—ã–º –ø–µ—Ä–µ—Ä—ã–≤–æ–º –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞–±–æ—á–∏—Ö —Å–µ—Å—Å–∏–π", preferredStyle: .alert)
            alert.addAction(UIAlertAction(title: "–û–ö", style: .default, handler: nil))
            present(alert, animated: true, completion: nil)
            return
        }
        if !isEditing {
            let newTask = TaskModel(title: title,
                                    subtitle: subtitleTextField.text,
                                    taskReadiness: false,
                                    readinessNumber: Int32(readinessNumber),
                                    shortRestDuration: Int32(shortRestDuration),
                                    sessionNumber: Int32(sessionNumber),
                                    sessionDuration: Int32(sessionDuration),
                                    longRestDuration: Int32(longRestDuration),
                                    longRestTime: Int32(longRestTime),
                                    taskDate: taskDate,
                                    canNotify: notifySwitch.isOn,
                                    context: context)
            
            delegate?.customAlertViewController(self, didAddTask: newTask)
        } else {
            guard let task = taskToEdit else {
                print("Task to edit is nil")
                return
            }
            task.title = title
            task.subtitle = subtitleTextField.text ?? ""
            task.sessionNumber = Int32(sessionNumber)
            task.sessionDuration = Int32(sessionDuration)
            task.shortRestDuration = Int32(shortRestDuration)
            task.longRestDuration = Int32(longRestDuration)
            task.longRestTime = Int32(longRestTime)
            task.taskDate = taskDate
            task.canNotify = notifySwitch.isOn
            delegate?.customAlertViewController(self, didAddTask: task)
        }
        do {
            try context.save()
        } catch {
            print("Failed to save context: \(error)")
        }
        pickerLabel.isHidden = true
        dismiss(animated: true, completion: nil)
    }
    
    // –°–∫—Ä—ã—Ç–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    @objc private func dismissKeyboard() {
        view.endEditing(true)
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ" –≤ –ø–∏–∫–µ—Ä–µ –¥–∞—Ç—ã
    @objc private func doneButtonTapped() {
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "dd.MM.yyyy"
        let dateString = dateFormatter.string(from: datePicker.date)
        datePickerButton.setTitle(dateString, for: .normal)
        datePicker.isHidden = true
        buttonStackView.isHidden = true
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å"
    @objc private func cancelButtonTapped() {
        datePicker.isHidden = true
        buttonStackView.isHidden = true
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å"
    @objc private func deleteButtonTapped() {
        guard let taskToEdit = taskToEdit else {
            print("No task to edit")
            dismiss(animated: true, completion: nil)
            return
        }
        // –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –¥–µ–ª–µ–≥–∞—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
        delegate?.customAlertViewController(self, didDeleteTask: taskToEdit)
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        dismiss(animated: true, completion: nil)
    }
    
    protocol TaskSelectionDelegate: AnyObject {
        func didSelectTask(_ task: TaskModel)
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ"
    @objc private func readytaskButtonTapped() {
        guard let taskToEdit = taskToEdit else {
            return
        }
        var soundManager: SoundManager!
        soundManager.playSound(fileName: "happysound", type: "mp3", isRepeated: true)
        // –ò–∑–º–µ–Ω—è–µ–º —Å–≤–æ–π—Å—Ç–≤–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á–∏
        taskToEdit.taskReadiness = true
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ Core Data
        let context = (UIApplication.shared.delegate as! AppDelegate).persistentContainer.viewContext
        do {
            try context.save()
        } catch {
            print("Failed to save task readiness: \(error)")
        }
        NotificationCenter.default.post(name: .tasksDidUpdate, object: nil)
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∏ overlay view
        let overlayView = UIView(frame: containerView.bounds)
        overlayView.backgroundColor = UIColor.white.withAlphaComponent(0.9)
        overlayView.layer.cornerRadius = 25
        containerView.addSubview(overlayView)
        let gifImageView = UIImageView(frame: CGRect(x: overlayView.frame.midX - 55, y: overlayView.frame.midY - 50, width: 103, height: 183))
        // –ó–∞–≥—Ä—É–∑–∫–∞ GIF-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if let gifURL = Bundle.main.url(forResource: "cat-dance-funny", withExtension: "gif"),
           let gifData = try? Data(contentsOf: gifURL) {
            gifImageView.image = UIImage.gifImageWithData(gifData)
        }
        overlayView.addSubview(gifImageView)
        // –î–æ–±–∞–≤–∏—Ç—å –±–∞–Ω–Ω–µ—Ä
        bannerLabel.frame = CGRect(x: 0, y: overlayView.bounds.midY - 130, width: overlayView.bounds.width, height: 100)
        bannerLabel.text = "–ì–æ—Ç–æ–≤–æ!"
        bannerLabel.font = UIFont(name: "AnonymousPro-Regular", size: 40)
        bannerLabel.textAlignment = .center
        bannerLabel.textColor = .catodoroBlack
        overlayView.addSubview(bannerLabel)
        // –î–æ–±–∞–≤–∏—Ç—å –∂–µ—Å—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Å–ª–æ–π
        let tapGesture = UITapGestureRecognizer(target: self, action: #selector(dismissOverlay(_:)))
        overlayView.addGestureRecognizer(tapGesture)
        
        // –û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if let parentController = self.presentingViewController as? StatisticsViewController {
            parentController.updateTasksForSelectedDate()
        }
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —ç–∫—Ä–∞–Ω –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ"
    @objc func dismissOverlay(_ sender: UITapGestureRecognizer) {
        if let overlayView = sender.view {
            var soundManager: SoundManager!
            soundManager.stopSound()
            overlayView.removeFromSuperview()
            dismiss(animated: true, completion: nil)
        }
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–µ—Å—Å–∏–π
    @objc private func sessionNumberButtonTapped() {
        selectedButton = sessionNumberButton
        showPickerView(for: sessionNumberButton)
        pickerView.reloadAllComponents()
        pickerView.isHidden = false
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–π
    @objc private func sessionDurationButtonTapped() {
        showPickerView(for: sessionDurationButton)
        selectedButton = sessionDurationButton
        pickerView.reloadAllComponents()
        pickerView.isHidden = false
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –æ—Ç–¥—ã—Ö–∞
    @objc private func shortRestDurationButtonTapped() {
        showPickerView(for: shortRestDurationButton)
        selectedButton = shortRestDurationButton
        pickerView.reloadAllComponents()
        pickerView.isHidden = false
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª–∏–Ω–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞
    @objc private func longRestDurationButtonTapped() {
        showPickerView(for: longRestDurationButton)
        selectedButton = longRestDurationButton
        pickerView.reloadAllComponents()
        pickerView.isHidden = false
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª–∏–Ω–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞
    @objc private func longRestTimeButtonTapped() {
        showPickerView(for: longRestTimeButton)
        selectedButton = longRestTimeButton
        pickerView.reloadAllComponents()
        pickerView.isHidden = false
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
    @objc private func datePickerButtonTapped() {
        datePicker.isHidden.toggle()
        buttonStackView.isHidden.toggle()
        if !datePicker.isHidden {
            let dateFormatter = DateFormatter()
            dateFormatter.dateFormat = "dd.MM.yyyy"
            if let selectedDate = dateFormatter.date(from: datePickerButton.titleLabel?.text ?? "") {
                datePicker.setDate(selectedDate, animated: false)
            }
        }
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –¥–∞—Ç—ã
    @objc private func dateChanged(_ sender: UIDatePicker) {
        self.taskDate = sender.date
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "dd.MM.yyyy"
        let dateString = dateFormatter.string(from: sender.date)
        datePickerButton.setTitle(dateString, for: .normal)
    }
}
//–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ PickerViewDataSource –∏ PickerViewDelegate
extension CustomAlertViewController {
    func numberOfComponents(in pickerView: UIPickerView) -> Int {
        return 1
    }
   
    func showPickerView(for button: UIButton) {
        selectedButton = button
        pickerView.reloadAllComponents()
        pickerView.isHidden = false
        pickerLabel.isHidden = false
        
        switch button {
        case sessionNumberButton:
            pickerLabel.text = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π"
            
        case sessionDurationButton:
            pickerLabel.text = "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏"
        case shortRestDurationButton:
            pickerLabel.text = "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –æ—Ç–¥—ã—Ö–∞"
        case longRestTimeButton:
            pickerLabel.text = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π –¥–æ –¥–ª–∏–Ω–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞"
        case longRestDurationButton:
            pickerLabel.text = "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª–∏–Ω–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞"
        default:
            pickerLabel.text = ""
        }
    }
    
    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {
        switch selectedButton {
        case sessionNumberButton:
            return sessionNumberOptions.count
        case sessionDurationButton:
            return sessionDurationOptions.count
        case shortRestDurationButton:
            return shortRestDurationOptions.count
        case longRestTimeButton:
            return restNumberOptions.count
        case longRestDurationButton:
            return longRestDurationOptions.count
        default:
            return 0
        }
    }
    
    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {
        switch selectedButton {
        case sessionNumberButton:
            return "\(sessionNumberOptions[row])"
        case sessionDurationButton:
            return "\(sessionDurationOptions[row])"
        case shortRestDurationButton:
            return "\(shortRestDurationOptions[row])"
        case longRestTimeButton:
            return "\(restNumberOptions[row])"
        case longRestDurationButton:
            return "\(longRestDurationOptions[row])"
        default:
            return nil
        }
    }
    
    func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {
        pickerView.isHidden = true
        
        switch selectedButton {
        case sessionNumberButton:
            sessionNumber = sessionNumberOptions[row]
            sessionNumberButton.setTitle("\(sessionNumber)\nüü£", for: .normal)
            pickerLabel.isHidden = true
        case sessionDurationButton:
            sessionDuration = sessionDurationOptions[row]
            sessionDurationButton.setTitle("\(sessionDuration)\n–º–∏–Ω", for: .normal)
            pickerLabel.isHidden = true
        case shortRestDurationButton:
            shortRestDuration = shortRestDurationOptions[row]
            shortRestDurationButton.setTitle("\(shortRestDuration)\n–º–∏–Ω", for: .normal)
            pickerLabel.isHidden = true
        case longRestDurationButton:
            longRestDuration = longRestDurationOptions[row]
            longRestDurationButton.setTitle("\(longRestDuration)\n–º–∏–Ω", for: .normal)
            pickerLabel.isHidden = true
        case longRestTimeButton:
            longRestTime = restNumberOptions[row]
            longRestTimeButton.setTitle("\(longRestTime)\nüü£", for: .normal)
            pickerLabel.isHidden = true
        default:
            break
        }
    }
}
